{"version":3,"file":"modulr-script-admin.js","mappings":"kCAAA,IAAIA,EAAyB,GAE7B,MAAMC,EAAmB,4BAEnBC,EAAwD,CAC7D,CACCC,KAAM,+BACNC,MAAO,CAAE,yBAA0B,wBAEpC,CACCD,KAAM,iCACNC,MAAO,CACN,yBACA,2BACA,2BAqBHC,OAAOC,OAAS,KACfC,QAAQC,IAAK,eAIRH,QAAQI,QAAQT,YACpBA,EAAcK,OAAOI,OAAOT,aAE5BK,OAAOK,YAAYC,SAAWC,IAC7BZ,EAAaa,OAAOC,KAAMF,GAAQ,IACjCC,OAAOE,OAAQH,GAAQ,EAAG,IAE5BP,OAAOI,OAAS,CAAC,EACjBJ,OAAOI,OAAOT,YAAcA,EAC5BO,QAAQC,IAAK,kBAAmBR,IAKjCE,EAAiBS,SAAWK,IAC3BC,SACEC,cAAe,IAAMjB,EAAmBe,EAAOb,OAC9CgB,iBAAkB,UAAYC,IAE/B,MAAMC,EAA+BD,EAAEE,OACjCC,EAAqCF,EAASG,GAE9CC,EAAmCJ,EAASK,MAElD,GAAKD,EAAe,CACnB,MAAME,EAAyB3B,EAAayB,GAEtCG,EAA2BL,EAAeM,QAC/C5B,EACA,IAIK6B,EAAgB5B,EAAiB6B,MACpCC,GACDA,EAAS7B,OAASyB,IAOpBE,GAAe1B,MAAMO,SACpB,CAAEsB,EAAoBC,KACrB,MAAMC,EAAmBlB,SAASC,cACjC,IAAMjB,EAAmBgC,GAErBE,IA7DZ,SAA+BnB,EAAiBoB,GAC/C,KAAQpB,EAAOqB,QAAQC,OAAS,GAC/BtB,EAAOuB,OAAQ,GAEhB,IAAM,IAAIC,EAAI,EAAGA,GAAKJ,EAAWE,OAAQE,IACxCxB,EAAOyB,IAAK,IAAIC,OAAQN,EAAYI,IAEtC,CAuDQG,CACCR,EACAR,GAEDpB,QAAQC,IAAK2B,GACbA,EAAiBT,MAChBC,EACCA,EAAeG,EAAgBI,EAAQ,GAE1C,IAIF3B,QAAQC,IACP,kCACAY,EAAEE,OAAOI,MACT1B,EAAaoB,EAAEE,OAAOI,OAExB,IACE,GACF,C,GC3GAkB,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,SAASF,GAChC,IAAIG,EAASH,GAAUA,EAAOI,WAC7B,WAAa,OAAOJ,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAL,EAAoBU,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,ECNAR,EAAoBU,EAAI,SAASN,EAASQ,GACzC,IAAI,IAAIC,KAAOD,EACXZ,EAAoBc,EAAEF,EAAYC,KAASb,EAAoBc,EAAEV,EAASS,IAC5E7C,OAAO+C,eAAeX,EAASS,EAAK,CAAEG,YAAY,EAAMC,IAAKL,EAAWC,IAG3E,ECPAb,EAAoBc,EAAI,SAASI,EAAKC,GAAQ,OAAOnD,OAAOoD,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,E","sources":["webpack://modul-r/./src/scripts/admin/customizer.ts","webpack://modul-r/webpack/bootstrap","webpack://modul-r/webpack/runtime/compat get default export","webpack://modul-r/webpack/runtime/define property getters","webpack://modul-r/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["let parsedFonts: FontDef[] = [];\n\nconst selectNamePrefix = '_customize-input-modul_r_';\n\nconst fontFamilySelect: { name: string; child: string[] }[] = [\n\t{\n\t\tname: 'typography_font_family_title',\n\t\tchild: [ 'defaults_title_regular', 'defaults_title_bold' ],\n\t},\n\t{\n\t\tname: 'typography_font_family_default',\n\t\tchild: [\n\t\t\t'defaults_default_light',\n\t\t\t'defaults_default_regular',\n\t\t\t'defaults_default_bold',\n\t\t],\n\t},\n];\n\n/**\n * It takes a select element and an array of strings, and replaces the select element's options with\n * the strings\n *\n * @param {Element | null} select     - Element | null - The select element to replace the options of.\n * @param {string | any[]} newOptions - This is the new options you want to replace the old ones with.\n */\nfunction replaceSelectOptions( select: Element, newOptions: string | any[] ) {\n\twhile ( select.options.length > 0 ) {\n\t\tselect.remove( 0 );\n\t}\n\tfor ( let i = 0; i <= newOptions.length; i++ ) {\n\t\tselect.add( new Option( newOptions[ i ] ) );\n\t}\n}\n\nwindow.onload = () => {\n\tconsole.log( 'admin ready' );\n\n\t/* Checking if the parsedFonts is already available in the window object. If it is, it will use that.\n\tIf it is not, it will parse the fonts and store it in the window object. */\n\tif ( window?.modulr?.parsedFonts ) {\n\t\tparsedFonts = window.modulr.parsedFonts;\n\t} else {\n\t\twindow.modulrFonts.forEach( ( font: FontDef ) => {\n\t\t\tparsedFonts[ Object.keys( font )[ 0 ] ] =\n\t\t\t\tObject.values( font )[ 0 ];\n\t\t} );\n\t\twindow.modulr = {};\n\t\twindow.modulr.parsedFonts = parsedFonts;\n\t\tconsole.log( 'Available fonts', parsedFonts );\n\t}\n\n\t/* The above code is used to populate the font weight select options based\n\ton the font family selected. */\n\tfontFamilySelect.forEach( ( select: { name: string; child: string[] } ) => {\n\t\tdocument\n\t\t\t.querySelector( '#' + selectNamePrefix + select.name )\n\t\t\t?.addEventListener( 'change', ( e ) => {\n\t\t\t\t// the selected item\n\t\t\t\tconst selected: EventTarget | null = e.target;\n\t\t\t\tconst selectedHtmlID: string | undefined = selected.id;\n\t\t\t\t// store the selected font available where key is the name and the value is an array of possible font weights\n\t\t\t\tconst selectedFont: string | undefined = selected.value;\n\n\t\t\t\tif ( selectedFont ) {\n\t\t\t\t\tconst availableSet: string[] = parsedFonts[ selectedFont ];\n\n\t\t\t\t\tconst fontDefaultseightsSelect = selectedHtmlID.replace(\n\t\t\t\t\t\tselectNamePrefix,\n\t\t\t\t\t\t''\n\t\t\t\t\t);\n\n\t\t\t\t\t// Finding the font weight select element that is associated with the font family select element.\n\t\t\t\t\tconst choosenSubset = fontFamilySelect.find(\n\t\t\t\t\t\t( fontType ) =>\n\t\t\t\t\t\t\tfontType.name === fontDefaultseightsSelect\n\t\t\t\t\t);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Looping through the font weight select elements and replacing the options with the available font\n\t\t\t\t\t * weights for the selected font family.\n\t\t\t\t\t */\n\t\t\t\t\tchoosenSubset?.child.forEach(\n\t\t\t\t\t\t( fontWeight: string, index: number ) => {\n\t\t\t\t\t\t\tconst fontWeightSelect = document.querySelector(\n\t\t\t\t\t\t\t\t'#' + selectNamePrefix + fontWeight\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( fontWeightSelect ) {\n\t\t\t\t\t\t\t\treplaceSelectOptions(\n\t\t\t\t\t\t\t\t\tfontWeightSelect,\n\t\t\t\t\t\t\t\t\tavailableSet\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconsole.log( fontWeightSelect );\n\t\t\t\t\t\t\t\tfontWeightSelect.value =\n\t\t\t\t\t\t\t\t\tavailableSet[\n\t\t\t\t\t\t\t\t\t\tavailableSet > choosenSubset ? index : 0\n\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'available font weight for %s %s',\n\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\tparsedFonts[ e.target.value ]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} );\n\t} );\n\n\t//'sub-accordion-section-modul_r_typography_options'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["parsedFonts","selectNamePrefix","fontFamilySelect","name","child","window","onload","console","log","modulr","modulrFonts","forEach","font","Object","keys","values","select","document","querySelector","addEventListener","e","selected","target","selectedHtmlID","id","selectedFont","value","availableSet","fontDefaultseightsSelect","replace","choosenSubset","find","fontType","fontWeight","index","fontWeightSelect","newOptions","options","length","remove","i","add","Option","replaceSelectOptions","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}